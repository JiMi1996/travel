package com.wind.service;import com.github.pagehelper.PageHelper;import com.wind.common.Constant;import com.wind.mybatis.mapper.UserMapper;import com.wind.mybatis.pojo.User;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import tk.mybatis.mapper.entity.Example;import java.util.List;import java.util.Optional;@Servicepublic class UserService{    @Autowired    UserMapper userMapper;    public Optional<User> getEntityByID(int id) {        return Optional.ofNullable(userMapper.selectByPrimaryKey(id));    }    public Optional<User> getEntityByEntity(User user){return Optional.ofNullable(userMapper.selectOne(user));}    public Optional<User> getEntityByName(String name) {        User user = new User();        user.setAccount(name);        return Optional.ofNullable(userMapper.selectOne(user));    }    public List<User> getAll(int page) {        PageHelper.startPage(page, Constant.PAGE_SIZE);        return userMapper.selectAll();    }    public List<User> getAll(String type, String value, int page) {        Example example = new Example(User.class);        Example.Criteria criteria = example.createCriteria();        criteria.andLike(type, "%" + value + "%");        PageHelper.startPage(page, Constant.PAGE_SIZE);        return userMapper.selectByExample(example);    }    public int getCount() {        int count = userMapper.selectCount(new User());        return count;    }    public int getCount(String type, String value) {        Example example = new Example(User.class);        Example.Criteria criteria = example.createCriteria();        criteria.andLike(type, "%" + value + "%");        int count = userMapper.selectCountByExample(example);        return count;    }    @Transactional    public boolean addEntity(User user) {        return userMapper.insertUseGeneratedKeys(user) > 0;    }    @Transactional    public boolean modifyEntityById(User user) {        return userMapper.updateByPrimaryKey(user) > 0;    }    @Transactional    public boolean deleteEntityById(int id) {        return userMapper.deleteByPrimaryKey(id) > 0;    }}