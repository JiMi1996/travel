package com.wind.service;import com.github.pagehelper.PageHelper;import com.wind.common.Constant;import com.wind.mybatis.mapper.TicketMapper;import com.wind.mybatis.pojo.Ticket;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import tk.mybatis.mapper.entity.Example;import java.util.List;import java.util.Optional;@Servicepublic class TicketService {    @Autowired    TicketMapper ticketMapper;    public Optional<Ticket> getEntityByID(int id) {        return Optional.ofNullable(ticketMapper.selectByPrimaryKey(id));    }    public Optional<Ticket> getEntityByEntity(Ticket ticket){return Optional.ofNullable(ticketMapper.selectOne(ticket));}    public Optional<Ticket> getEntityByName(String name) {        Ticket ticket = new Ticket();        ticket.setName(name);        return Optional.ofNullable(ticketMapper.selectOne(ticket));    }    public List<Ticket> getAll(int page) {        PageHelper.startPage(page, Constant.PAGE_SIZE);        return ticketMapper.selectAll();    }    public List<Ticket> getAll() {        return ticketMapper.selectAll();    }    public List<Ticket> getAll(String type, String value, int page) {        Example example = new Example(Ticket.class);        Example.Criteria criteria = example.createCriteria();        criteria.andLike(type, "%" + value + "%");        PageHelper.startPage(page, Constant.PAGE_SIZE);        return ticketMapper.selectByExample(example);    }    public int getCount() {        int count = ticketMapper.selectCount(new Ticket());        return count;    }    public int getCount(String type, String value) {        Example example = new Example(Ticket.class);        Example.Criteria criteria = example.createCriteria();        criteria.andLike(type, "%" + value + "%");        int count = ticketMapper.selectCountByExample(example);        return count;    }    @Transactional    public boolean addEntity(Ticket ticket) {        return ticketMapper.insertUseGeneratedKeys(ticket) > 0;    }    @Transactional    public boolean modifyEntityById(Ticket ticket) {        return ticketMapper.updateByPrimaryKey(ticket) > 0;    }    @Transactional    public boolean deleteEntityById(int id) {        return ticketMapper.deleteByPrimaryKey(id) > 0;    }}