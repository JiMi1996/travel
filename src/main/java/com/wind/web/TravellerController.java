package com.wind.web;import com.wind.common.Constant;import com.wind.common.PaginatedResult;import com.wind.exception.ResourceNotFoundException;import com.wind.mybatis.pojo.Traveller;import com.wind.service.TravellerService;import lombok.Data;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.*;import org.springframework.web.servlet.support.ServletUriComponentsBuilder;import javax.servlet.http.HttpSession;import java.net.URI;import java.util.Optional;@Controller@RequestMapping("/traveller")public class TravellerController {    @Autowired    private TravellerService travellerService;    //id查找信息    @GetMapping("/{id}")    public String getUserById(@PathVariable int id,ModelMap modelMap) {        modelMap.put("userInfo", travellerService.getEntityByID(id));        return "admin/index";    }    //用户列表    @GetMapping("/index/{page}")    public String search(@PathVariable int page,ModelMap modelMap) {        PaginatedResult PageInfo = new PaginatedResult().setData(travellerService.getAll(page))                    .setCurrentPage(page)                    .setCount(travellerService.getCount());        modelMap.put("PageInfo", PageInfo);        return "admin/traveller/index";    }    //跳转添加界面    @RequestMapping(value = "/add", method = RequestMethod.GET)    public String add(ModelMap map) {        Traveller traveller = new Traveller();        map.addAttribute("user",traveller);        return "admin/traveller/form";    }    //跳转修改界面    @RequestMapping(value = "/edit/{id}")    public String add(@PathVariable int id,ModelMap map) {        assertUserExist(id);        Traveller traveller = new Traveller();        Optional<Traveller> myTraveller = travellerService.getEntityByID(id);        if(myTraveller.isPresent()){            traveller =  myTraveller.get();        }        map.addAttribute("traveller",traveller);        return "admin/traveller/form";    }    //增加,修改用户    @PostMapping("/change")    public ResponseEntity<?> postUser(@ModelAttribute Traveller traveller) {        System.out.println(traveller.toString());       if(traveller.getId()==null){           System.out.println("");           travellerService.addEntity(traveller);           URI location = ServletUriComponentsBuilder               .fromCurrentRequest()               .path("/{id}")               .buildAndExpand(traveller.getId())               .toUri();           return ResponseEntity               .created(location)               .body(traveller);       }else{           System.out.println("");           assertUserExist(traveller.getId());           travellerService.modifyEntityById(traveller);           return ResponseEntity               .status(HttpStatus.ACCEPTED)               .body(traveller);       }    }    @PutMapping    @ResponseBody    public ResponseEntity<?> putUser(@RequestBody Traveller traveller) {        assertUserExist(traveller.getId());        travellerService.modifyEntityById(traveller);        return ResponseEntity            .status(HttpStatus.ACCEPTED)            .body(traveller);    }    //删除    @RequestMapping("/delete/{id}")    public ResponseEntity<?> deleteUser(@PathVariable int id,HttpSession session) {        assertUserExist(id);        boolean result = travellerService.deleteEntityById(id);        if (result)            return ResponseEntity                .accepted()                .build();        else            return ResponseEntity                .notFound()                .build();    }    private void assertUserExist(int id) {        travellerService            .getEntityByID(id)            .orElseThrow(() -> new ResourceNotFoundException()                .setResourceName(Constant.RESOURCE_USER)                .setId(id));    }    @Data    static class changePasswordForm {        private String oldPassword;        private String newPassword;    }}