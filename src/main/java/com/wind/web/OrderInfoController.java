package com.wind.web;import com.wind.common.Constant;import com.wind.common.PaginatedResult;import com.wind.exception.ResourceNotFoundException;import com.wind.mybatis.pojo.OrderInfo;import com.wind.service.OrderInfoService;import com.wind.service.UserService;import lombok.Data;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.*;import org.springframework.web.servlet.support.ServletUriComponentsBuilder;import javax.servlet.http.HttpSession;import java.net.URI;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.*;@Controller@RequestMapping("/orderInfo")public class OrderInfoController {    @Autowired    private OrderInfoService orderInfoService;    @Autowired    private UserService userService;    //id查找信息    @GetMapping("/{id}")    public String getUserById(@PathVariable int id,ModelMap modelMap) {        modelMap.put("userInfo", orderInfoService.getEntityByID(id));        return "admin/index";    }    //用户列表    @GetMapping("/index/{page}")    public String search(@PathVariable int page,ModelMap modelMap) {        System.out.println(page);        orderInfoService.getEntityByID(1);        List<OrderInfo> list=orderInfoService.getAll(page);        System.out.println(list);        Map<String,Map> map= new HashMap<>();        List<Object> myList= new ArrayList<Object>();        for(OrderInfo orderInfo:list){            Map<String,Object> myMap= new HashMap<>();            String userName = userService.getEntityByID(orderInfo.getUserid()).get().getName();            myMap.put("orderInfo",orderInfo);            myMap.put("userName",userName);            myList.add(myMap);        }        PaginatedResult PageInfo = new PaginatedResult().setData(myList)                    .setCurrentPage(page)                    .setCount(orderInfoService.getCount());        modelMap.put("PageInfo", PageInfo);        return "admin/orderInfo/index";    }    //跳转添加界面    @RequestMapping(value = "/add", method = RequestMethod.GET)    public String add(ModelMap map) {        OrderInfo orderInfo = new OrderInfo();        map.addAttribute("user",orderInfo);        return "admin/orderInfo/form";    }    //跳转修改界面    @RequestMapping(value = "/edit/{id}")    public String add(@PathVariable int id,ModelMap map) {        assertUserExist(id);        OrderInfo orderInfo = new OrderInfo();        Optional<OrderInfo> myOrderInfo = orderInfoService.getEntityByID(id);        if(myOrderInfo.isPresent()){            orderInfo =  myOrderInfo.get();        }        map.addAttribute("orderInfo",orderInfo);        return "admin/orderInfo/form";    }    //增加,修改    @PostMapping("/change")    public ResponseEntity<OrderInfo> postUser(String id,String userid,String ticketname,String travelname,String price,String traveldays,String buydate,String godate) {        System.out.println(id+"\n"+ticketname+"\n"+travelname+"\n"+price+"\n"+traveldays+"\n"+buydate+"\n"+godate);        SimpleDateFormat format=new SimpleDateFormat("yyyy-MM-dd");        Date date1 = null;        Date date2 = null;        try {            date1 = format.parse(buydate);            date2 = format.parse(godate);        } catch (ParseException e) {            e.printStackTrace();        }        OrderInfo orderInfo= new OrderInfo();        orderInfo.setId(new Integer(id));        orderInfo.setUserid(new Integer(userid));        orderInfo.setTicketname(ticketname);        orderInfo.setTravelname(travelname);        orderInfo.setPrice(new Double(price));        orderInfo.setTraveldays(Double.parseDouble(traveldays));        orderInfo.setBuydate(date1);        orderInfo.setGodate(date2);       if(orderInfo.getId()==null){           System.out.println();           orderInfoService.addEntity(orderInfo);           URI location = ServletUriComponentsBuilder               .fromCurrentRequest()               .path("/{id}")               .buildAndExpand(orderInfo.getId())               .toUri();           return ResponseEntity               .created(location)               .body(orderInfo);       }else{           System.out.println();           assertUserExist(orderInfo.getId());           orderInfoService.modifyEntityById(orderInfo);           return ResponseEntity               .status(HttpStatus.ACCEPTED)               .body(orderInfo);       }    }    //修改    @PutMapping    @ResponseBody    public ResponseEntity<?> putUser(@RequestBody OrderInfo orderInfo) {        assertUserExist(orderInfo.getId());        orderInfoService.modifyEntityById(orderInfo);        return ResponseEntity            .status(HttpStatus.ACCEPTED)            .body(orderInfo);    }    //删除    @RequestMapping("/delete/{id}")    public ResponseEntity<?> deleteUser(@PathVariable int id,HttpSession session) {        assertUserExist(id);        boolean result = orderInfoService.deleteEntityById(id);        if (result)            return ResponseEntity                .accepted()                .build();        else            return ResponseEntity                .notFound()                .build();    }    private void assertUserExist(int id) {        orderInfoService            .getEntityByID(id)            .orElseThrow(() -> new ResourceNotFoundException()                .setResourceName(Constant.RESOURCE_USER)                .setId(id));    }    @Data    static class changePasswordForm {        private String oldPassword;        private String newPassword;    }}