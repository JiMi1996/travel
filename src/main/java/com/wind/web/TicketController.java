package com.wind.web;import com.wind.common.Constant;import com.wind.common.PaginatedResult;import com.wind.exception.ResourceNotFoundException;import com.wind.mybatis.pojo.Ticket;import com.wind.service.TicketService;import com.wind.service.UserService;import lombok.Data;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.*;import org.springframework.web.servlet.support.ServletUriComponentsBuilder;import java.net.URI;import java.util.List;import java.util.Optional;/** * Created by osx on 2018/3/26. */@Controller@RequestMapping("/ticket")public class TicketController {//    @Autowired//    private TicketService memoryService;    @Autowired    private UserService userService;    @Autowired    private TicketService ticketService;    //id查找信息    @GetMapping("/{id}")    public String getUserById(@PathVariable int id, ModelMap modelMap) {        modelMap.put("userInfo", ticketService.getEntityByID(id));        return "admin/index";    }    //id查找信息    @PostMapping("/getByName")    @ResponseBody    public String getUserByName(int opt, ModelMap modelMap) {        System.out.println(opt);        Optional<Ticket> ticket = ticketService.getEntityByID(opt);        Ticket ticket1 = new Ticket();        if(ticket.isPresent()){            ticket1 = ticket.get();        }        String str = Double.toString(ticket1.getPrice());//        JSONObject jsonObject = new JSONObject();//        try {//            jsonObject.put("price", );//        } catch (JSONException e) {//            e.printStackTrace();//        }//       Optional<Ticket> ticket= ticketService.getEntityByName(name);//       Ticket ticket1 = new Ticket();//        if(ticket.isPresent()){//            ticket1 = ticket.get();//        }//        return  ticket1.getPrice().toString();        System.out.println(str);        return str;    }    //用户列表    @GetMapping("/index/{page}")    public String search(@PathVariable int page,ModelMap modelMap) {        List<Ticket> list=ticketService.getAll(page);        PaginatedResult PageInfo = new PaginatedResult().setData(list)            .setCurrentPage(page)            .setCount(ticketService.getCount());        modelMap.put("PageInfo", PageInfo);        return "admin/ticket/index";    }    //跳转添加界面    @RequestMapping(value = "/add", method = RequestMethod.GET)    public String add(ModelMap map) {        Ticket ticket = new Ticket();        map.addAttribute("ticket",ticket);        return "admin/ticket/form";    }    //跳转修改界面    @RequestMapping(value = "/edit/{id}")    public String add(@PathVariable int id,ModelMap map) {        assertUserExist(id);        Ticket ticket = new Ticket();        Optional<Ticket> myTicket = ticketService.getEntityByID(id);        if(myTicket.isPresent()){            ticket =  myTicket.get();        }        map.addAttribute("ticket",ticket);        return "admin/ticket/form";    }    //增加,修改售票    @PostMapping("/change")    public ResponseEntity<Ticket> postUser(@ModelAttribute  Ticket ticket) {        if(ticket.getId()==null){            ticketService.addEntity(ticket);            URI location = ServletUriComponentsBuilder                .fromCurrentRequest()                .path("/{id}")                .buildAndExpand(ticket.getId())                .toUri();            return ResponseEntity                .created(location)                .body(ticket);        }else{            System.out.println();            assertUserExist(ticket.getId());            ticketService.modifyEntityById(ticket);            return ResponseEntity                .status(HttpStatus.ACCEPTED)                .body(ticket);        }    }    @PutMapping    @ResponseBody    public ResponseEntity<?> putUser(@RequestBody Ticket ticket) {        assertUserExist(ticket.getId());        ticketService.modifyEntityById(ticket);        return ResponseEntity            .status(HttpStatus.ACCEPTED)            .body(ticket);    }    @RequestMapping("/delete/{id}")    public ResponseEntity<?> deleteUser(@PathVariable int id) {        assertUserExist(id);        boolean result = ticketService.deleteEntityById(id);        if (result)            return ResponseEntity                .accepted()                .build();        else            return ResponseEntity                .notFound()                .build();    }    private void assertUserExist(int id) {        ticketService            .getEntityByID(id)            .orElseThrow(() -> new ResourceNotFoundException()                .setResourceName(Constant.RESOURCE_USER)                .setId(id));    }    @Data    static class changePasswordForm {        private String oldPassword;        private String newPassword;    }}