package com.wind.web;import com.wind.common.Constant;import com.wind.common.PaginatedResult;import com.wind.exception.ResourceNotFoundException;import com.wind.mybatis.pojo.Memory;import com.wind.mybatis.pojo.Ticket;import com.wind.service.MemoryService;import com.wind.service.TicketService;import com.wind.service.UserService;import lombok.Data;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.*;import org.springframework.web.servlet.support.ServletUriComponentsBuilder;import java.net.URI;import java.util.*;/** * Created by osx on 2018/3/26. */@Controller@RequestMapping("/memory")public class MemoryController {    @Autowired    private MemoryService memoryService;    @Autowired    private UserService userService;    @Autowired    private TicketService ticketService;    //id查找信息    @GetMapping("/{id}")    public String getUserById(@PathVariable int id, ModelMap modelMap) {        modelMap.put("userInfo", memoryService.getEntityByID(id));        return "admin/index";    }    //用户列表    @GetMapping("/index/{page}")    public String search(@PathVariable int page,ModelMap modelMap) {        List<Memory> list=memoryService.getAll(page);        Map<String,Map> map= new HashMap<>();        List<Object> myList= new ArrayList<Object>();        for(Memory memory:list){            Map<String,Object> myMap= new HashMap<>();            String userName = userService.getEntityByID(memory.getUserid()).get().getName();            Ticket ticket = ticketService.getEntityByID(memory.getTicketid()).get();            String ticketName =ticket.getName();            Double ticketPrice =ticket.getPrice();            myMap.put("memory",memory);            myMap.put("userName",userName);            myMap.put("ticketName",ticketName);            myMap.put("ticketPrice",ticketPrice);            myList.add(myMap);        }        PaginatedResult PageInfo = new PaginatedResult().setData(myList)            .setCurrentPage(page)            .setCount(memoryService.getCount());        modelMap.put("PageInfo", PageInfo);        return "admin/memory/index";    }    //跳转修改界面    @RequestMapping(value = "/edit/{id}")    public String add(@PathVariable int id,ModelMap modelMap) {        assertUserExist(id);        Memory memory = new Memory();        Optional<Memory> myMemory = memoryService.getEntityByID(id);        List<Object> list = new ArrayList<>();        List<Ticket> ticketList =  ticketService.getAll();        if(myMemory.isPresent()){            memory =  myMemory.get();            Map<String,Object> myMap= new HashMap<>();            String userName = userService.getEntityByID(memory.getUserid()).get().getName();            Ticket ticket = ticketService.getEntityByID(memory.getTicketid()).get();            String ticketName =ticket.getName();            Double ticketPrice =ticket.getPrice();            myMap.put("memory",memory);            myMap.put("userName",userName);            myMap.put("ticketName",ticketName);            myMap.put("ticketPrice",ticketPrice);            myMap.put("ticketList",ticketList);            list.add(myMap);        }        modelMap.put("list",list);        System.out.println(list);        return "admin/memory/form";    }    //增加,修改用户    @PostMapping("/change")    public ResponseEntity<?> postUser(@ModelAttribute Memory memory) {        System.out.println(memory.toString());        if(memory.getId()==null){            memoryService.addEntity(memory);            URI location = ServletUriComponentsBuilder                .fromCurrentRequest()                .path("/{id}")                .buildAndExpand(memory.getId())                .toUri();            return ResponseEntity                .created(location)                .body(memory);        }else{            assertUserExist(memory.getId());            memoryService.modifyEntityById(memory);            return ResponseEntity                .status(HttpStatus.ACCEPTED)                .body(memory);        }    }    @PutMapping    @ResponseBody    public ResponseEntity<?> putUser(@RequestBody Memory memory) {        assertUserExist(memory.getId());        memoryService.modifyEntityById(memory);        return ResponseEntity            .status(HttpStatus.ACCEPTED)            .body(memory);    }    @RequestMapping("/delete/{id}")    public ResponseEntity<?> deleteUser(@PathVariable int id) {        assertUserExist(id);        boolean result = memoryService.deleteEntityById(id);        if (result)            return ResponseEntity                .accepted()                .build();        else            return ResponseEntity                .notFound()                .build();    }    private void assertUserExist(int id) {        memoryService            .getEntityByID(id)            .orElseThrow(() -> new ResourceNotFoundException()                .setResourceName(Constant.RESOURCE_USER)                .setId(id));    }    @Data    static class changePasswordForm {        private String oldPassword;        private String newPassword;    }}